component

state newTodoLabel = ""
state todos = []

fn add() ->
   newTodoLabel = ""
   todos += {label: newTodoLabel, completed: false}

fn delete(todo) ->
   todos.remove(todo)

fn markComplete(todo) ->
   todo.completed = true

:h1 "todos"
:input *newTodoLabel, onEnter: add
for (todo in todos)
   :div
      :button "Done", onClick: -> markComplete(todo)
      :"{todo.label}" if (todo.completed) style "text-decoration: line-through"
      :button "X", onClick: -> delete(todo)

/*
component

use auth

use database
   table Todo
      label String{maxLength: 40}
      completed Boolean

      filter select userId == auth.loggedInUserId
      modify insert #{userId: auth.loggedInUserId}

route "/todos" && auth.isLoggedIn
   css .completed
      line-decoration: line-through

   state newTodoLabel = ""
   state todos = select Todo

   fn add() ->
      insert Todo #{label: newTodoLabel, completed: false} ; component.refresh()

   fn markComplete(todo) ->
      update todo #{completed: true} ; component.refresh()

   fn remove(todo) ->
      delete todo ; component.refresh()

   :h1 "todos"
   :input *newTodoLabel, type: "text", onEnter: add
   for (todo in todos)
      :div if (todo.completed) .completed, onClick: -> markComplete(todo)
         "{todo.label}"
         :button.btn.danger "Delete", onClick: -> remove(todo)

route auth.loginRoute

route auth.loginRoute

route default
   :div/button "Login" changeRoute("/login")
   :div/button "Register" changeRoute("/register")
*/

/*
use bootstrap

style heading
  font-size: 30px
style todoRow
  border: 1px solid black
*/

/*
// import in logic
display(../../img/logo.png)
display(./img/logo.png)
// import a component
:(./App) "hey" {name: "Bob"}
*/

/*
// indent rules
fn hey() ->
   console.log("hey")
   fewArgs(1, 2, 3)
   escapeOneNewline(1, 2, 3\
      4, 5, 6)
   `hey  // if a statement is surrounded by backticks, newlines are escaped
     .man()
        .lots()
.of()
          .calls()`
   escapeManyNewLines`( // can surround parens, curlies or brackets
      1, 2, 3,
      4, 5, 6,
      7, 8, 9,
   )`
   // backtick only escapes 1 level, then it returns to normal indent
   // this allows multiple indented expressions to be nested inside
   // 1 statement
   manyCallbacks`(
      num ->
         console.log("okay")
         lotsAArgs`(
            1, 2, 3, 4, 5, 6
         )`,
      num ->
         console.log("okay")
   )`
*/